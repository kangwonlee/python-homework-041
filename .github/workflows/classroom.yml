name: Autograding Tests
on:
  - push
  - workflow_dispatch
  - repository_dispatch

permissions:
  checks: read
  actions: write # upload artifact
  contents: read

jobs:
  run-autograding-tests:
    runs-on: ubuntu-latest
    if: github.actor != 'github-classroom[bot]'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: set short sha
      env:
        GITHUB_SHA: ${{ github.sha }}
      run: |
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
        echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV

    - name: Check payload
      env:
        REPO: ${{ github.event.client_payload.repository }}
        BUILD_IMAGE_URL: ${{ github.event.client_payload.image_url }}
      run: |
        echo "REPO=$REPO"
        echo "BUILD_IMAGE_URL=$BUILD_IMAGE_URL"

    - name: Set report file names
      id: json
      env:
        BUILD_IMAGE_URL: ${{ github.event.client_payload.image_url }}
      run: |
        echo "syntax=report_syntax.json" >> $GITHUB_ENV
        echo "style=report_style.json" >> $GITHUB_ENV
        echo "results=report_results.json" >> $GITHUB_ENV
        echo "workflow_student_code_folder=${{ github.workspace }}" >> $GITHUB_ENV
        echo "container_mounting_point=/app/workspace" >> $GITHUB_ENV
        if [[ $BUILD_IMAGE_URL ]] then
          echo "using payload image url : $BUILD_IMAGE_URL"
          echo "image_url=$BUILD_IMAGE_URL" >> $GITHUB_ENV
        else
          echo "using vars image url : ${{ vars.PYTHON_GRADER_031 }}"
          echo "image_url=${{ vars.PYTHON_GRADER_031 }}" >> $GITHUB_ENV
        fi

    # container_json_report_folder has to be a location under
    #   `container_mounting_point`
    - name: Set folders within the container
      run: |
        echo "container_student_code_folder=${{ env.container_mounting_point }}" >> $GITHUB_ENV
        echo "container_test_code_folder=/tests" >> $GITHUB_ENV
        echo "container_json_report_folder=${{ env.container_mounting_point }}" >> $GITHUB_ENV

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.CR_PAT }}

    - name: Pull Docker Image
      run: docker pull ${{ env.image_url }}

    - name: check syntax
      id: check-syntax
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: check syntax
        setup-command: "docker run --rm --user 1001:1001 --volume ${{ github.workspace }}:${{ env.container_mounting_point }} ${{ env.image_url }} python3 -m pip list"
        command:       "docker run --rm --user 1001:1001 --volume ${{ github.workspace }}:${{ env.container_mounting_point }} --env STUDENT_CODE_FOLDER=${{ env.container_student_code_folder }} ${{ env.image_url }} python3 -m pytest --json-report --json-report-indent=4 --json-report-file=${{ env.container_json_report_folder }}/${{ env.syntax }} ${{ env.container_test_code_folder }}/test_syntax.py" # Run test in container
        timeout: 1
        max-score: 3

    - name: test results
      id: test-results
      uses: classroom-resources/autograding-command-grader@v1
      with:
        test-name: test results
        setup-command: "docker run --rm --user 1001:1001 --volume ${{ github.workspace }}:${{ env.container_mounting_point }} ${{ env.image_url }} python3 -m pip list"
        command:       "docker run --rm --user 1001:1001 --volume ${{ github.workspace }}:${{ env.container_mounting_point }} --env STUDENT_CODE_FOLDER=${{ env.container_student_code_folder }} ${{ env.image_url }} python3 -m pytest -n auto --json-report --json-report-indent=4 --json-report-file=${{ env.container_json_report_folder }}/${{ env.results }} ${{ env.container_test_code_folder }}/test_results.py" # Run test in container
        timeout: 2
        max-score: 2

    - name: Autograding Reporter
      uses: classroom-resources/autograding-grading-reporter@v1
      env:
        CHECK-SYNTAX_RESULTS: "${{steps.check-syntax.outputs.result}}"
        TEST-RESULTS_RESULTS: "${{steps.test-results.outputs.result}}"
      with:
        runners: check-syntax,test-results

    - name: AI Tutor
      id: ai-tutor
      if: always()
      run: |
        docker run --rm --user 1001:1001 \
          --volume ${{ github.workspace }}:${{ env.container_mounting_point }} \
          --env INPUT_REPORT-FILES="${{ env.container_mounting_point }}/${{ env.results }},${{ env.container_mounting_point }}/${{ env.syntax }}" \
          --env INPUT_STUDENT-FILES="${{ env.container_student_code_folder }}/exercise.py" \
          --env INPUT_README-PATH="${{ env.container_student_code_folder }}/README.md" \
          --env INPUT_API-KEY="${{ secrets.GOOGLE_API_KEY }}" \
          --env INPUT_EXPLANATION-IN="Korean" \
          ${{ env.image_url }} \
          python3 ai_tutor/entrypoint.py >> $GITHUB_STEP_SUMMARY
      timeout-minutes: 2

    - name: upload artifacts
      id: artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: artifacts-${{ env.SHORT_SHA }}
        path: |
          ./*.png
          ./*.json
        retention-days: 21
        overwrite: true
